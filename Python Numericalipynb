{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matrix #1\n",
      "Diagonally Dominant\n",
      "Iteration #1 : [ 1.25        1.79166667 -0.16666667]\n",
      "Difference = 2.190969470855818\n",
      "Not Convergent\n",
      "Iteration #2 : [0.39583333 2.01736111 0.07638889]\n",
      "Difference = 0.9163049054675799\n",
      "Not Convergent\n",
      "Iteration #3 : [0.22222222 1.92476852 0.19502315]\n",
      "Difference = 0.22975703161001526\n",
      "Not Convergent\n",
      "Iteration #4 : [0.23885995 1.86267843 0.2191358 ]\n",
      "Difference = 0.06865429955384911\n",
      "Convergent\n",
      "Matrix #2\n",
      "Diagonally Dominant\n",
      "Iteration #1 : [ 1.75       -1.46428571 -0.95535714]\n",
      "Difference = 2.473729961711542\n",
      "Not Convergent\n",
      "Iteration #2 : [ 0.81622024 -1.87064201 -0.36670033]\n",
      "Difference = 1.1762597197414264\n",
      "Not Convergent\n",
      "Iteration #3 : [ 0.6282338  -1.72930955 -0.22959833]\n",
      "Difference = 0.2722328425469943\n",
      "Not Convergent\n",
      "Iteration #4 : [ 0.7221029  -1.67672768 -0.28779591]\n",
      "Difference = 0.12232423662530427\n",
      "Not Convergent\n",
      "Iteration #5 : [ 0.74792586 -1.68966656 -0.30608945]\n",
      "Difference = 0.034189089310782864\n",
      "Convergent\n",
      "Matrix #3\n",
      "Not Diagonally Dominant!\n",
      "Matrix #4\n",
      "Diagonally Dominant\n",
      "Iteration #1 : [0.5    0.1875 0.    ]\n",
      "Difference = 0.5340002340823456\n",
      "Not Convergent\n",
      "Iteration #2 : [0.47321429 0.19084821 0.01190476]\n",
      "Difference = 0.02950268436444472\n",
      "Convergent\n"
     ]
    }
   ],
   "source": [
    "##Gaus Seidel\n",
    "import numpy as np\n",
    "\n",
    "#Matrix Equation\n",
    "x = [\n",
    "    [[8, 4, 2],\n",
    "    [1, 6, 3],\n",
    "    [5, 6, 12]],\n",
    "    [[12, -7, -1],\n",
    "     [1, -7, 2],\n",
    "     [8, -1, 12]],\n",
    "    [[4, 2, 7],\n",
    "     [3, -7, 5],\n",
    "     [2, -1, 3]],\n",
    "    [[14, 2, 1],\n",
    "     [1, 8, 4],\n",
    "     [9, 8, 18]]\n",
    "]\n",
    "y = [\n",
    "    [10, 12, 15],\n",
    "    [21, 12, 4],\n",
    "    [8, 4, 5],\n",
    "    [7, 2, 6]\n",
    "]\n",
    "\n",
    "def diagonal_dominance(matrix):\n",
    "    mtrx = np.array(matrix)\n",
    "    diagonal = np.array(np.diag(matrix))\n",
    "    np.fill_diagonal(mtrx, 0)\n",
    "    sum = np.sum(np.abs(mtrx), axis=1)\n",
    "    \n",
    "    return np.all(np.abs(diagonal) > sum)\n",
    "\n",
    "def gauss_seidel(x,y):\n",
    "    for i, (matrix, matrixY) in enumerate(zip(x, y)):\n",
    "        print(f'Matrix #{i+1}')\n",
    "        if not diagonal_dominance(matrix):\n",
    "            print('Not Diagonally Dominant!')\n",
    "            continue\n",
    "        else:\n",
    "            print('Diagonally Dominant')\n",
    "            \n",
    "        x = np.array(matrix)\n",
    "        y = np.array(matrixY)\n",
    "        diag_x = np.array(np.diag(x))\n",
    "        np.fill_diagonal(x, 0)\n",
    "        \n",
    "        max_iteration = 50\n",
    "        threshold = 0.090\n",
    "        x = -x\n",
    "        \n",
    "        temp_result = np.zeros(diag_x.shape)\n",
    "        for iter in range(max_iteration):\n",
    "            new_result = np.array(temp_result)\n",
    "            for i, row in enumerate(x):\n",
    "                new_result[i] = (y[i] + np.dot(new_result, row)) / diag_x[i]\n",
    "            \n",
    "            difference = np.sqrt(np.dot(new_result - temp_result, new_result - temp_result))\n",
    "            print(f'Iteration #{iter + 1} : {new_result}')\n",
    "            print(f'Difference = {difference}')\n",
    "            \n",
    "            if(difference <= threshold):\n",
    "                print('Convergent')\n",
    "                break\n",
    "            else :\n",
    "                print('Not Convergent')\n",
    "            temp_result = new_result\n",
    "                \n",
    "gauss_seidel(x, y)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vince\\AppData\\Local\\Temp\\ipykernel_34080\\2211367691.py:25: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"or\" (-> color='r'). The keyword argument will take precedence.\n",
      "  plt.plot(x, y, 'or', label='Data Points', color='#00b88a')\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##Least Square Regression & Plotting\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x = np.linspace(1, 20, 50)\n",
    "y = np.linspace(5, 15, 50)\n",
    "for i in range(50):\n",
    "    if i % 2 != 0: \n",
    "        y[i] += np.random.uniform(-1, 1)\n",
    "    else:\n",
    "        y[i] += np.random.uniform(-1, 1)\n",
    "        \n",
    "        \n",
    "def least_square(x, y):\n",
    "    x = np.array(x)\n",
    "    y = np.array(y)\n",
    "    ones = np.ones(np.size(x))\n",
    "    \n",
    "    A = np.vstack((x, ones)).T\n",
    "    Y = y[:, np.newaxis]\n",
    "    \n",
    "    first = np.linalg.inv(np.dot(A.T, A))\n",
    "    alpha = np.dot(np.dot(first, A.T), y)\n",
    "    \n",
    "    plt.plot(x, y, 'or', label='Data Points', color='#00b88a')\n",
    "    plt.plot(x, alpha [0] * x + alpha[1], label='Fitted Line', color='#d6a400')\n",
    "    plt.title('Least Square Regression')\n",
    "    plt.legend(loc='lower right')\n",
    "    plt.show()\n",
    "least_square(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "With Newton Raphson\n",
      "Iteration # 1 new root =  4.059394603206213\n",
      "Iteration # 2 new root =  3.309726207472683\n",
      "Iteration # 3 new root =  2.7136779793915182\n",
      "Iteration # 4 new root =  2.2413748455764324\n",
      "Iteration # 5 new root =  1.8681343500337189\n",
      "Iteration # 6 new root =  1.5710520173340736\n",
      "Iteration # 7 new root =  1.3209905431493136\n",
      "Iteration # 8 new root =  1.0434622532636735\n",
      "Iteration # 9 new root =  -10.90447641710416\n",
      "Iteration # 10 new root =  -8.677343307151903\n",
      "Iteration # 11 new root =  -6.896696235790187\n",
      "Iteration # 12 new root =  -5.473622728769812\n",
      "Iteration # 13 new root =  -4.337215836274071\n",
      "Iteration # 14 new root =  -3.431169015591493\n",
      "Iteration # 15 new root =  -2.711260643742435\n",
      "Iteration # 16 new root =  -2.143778628537372\n",
      "Iteration # 17 new root =  -1.705118649836952\n",
      "Iteration # 18 new root =  -1.3827534216212092\n",
      "Iteration # 19 new root =  -1.1756184711815993\n",
      "Iteration # 20 new root =  -1.0819735176046303\n",
      "Iteration # 21 new root =  -1.0636334151565525\n",
      "Final root answer is  -1.0636334151565525\n",
      "-1.0636334151565525\n",
      "\n",
      "With Bisection\n",
      "Iteration #1: f(-1.0) = 5.0\n",
      "Iteration #2: f(-5.5) = -49456.75\n",
      "Iteration #3: f(-3.25) = -3987.34375\n",
      "Iteration #4: f(-2.125) = -518.992919921875\n",
      "Iteration #5: f(-1.5625) = -105.9798355102539\n",
      "Iteration #6: f(-1.28125) = -28.859676599502563\n",
      "Iteration #7: f(-1.140625) = -7.98856396228075\n",
      "Iteration #8: f(-1.0703125) = -0.662254678318277\n",
      "Iteration #9: f(-1.03515625) = 2.3594573942755233\n",
      "Iteration #10: f(-1.052734375) = 0.8983502728563053\n",
      "Iteration #11: f(-1.0615234375) = 0.13075435325618656\n",
      "Iteration #12: f(-1.06591796875) = -0.26253944813141317\n",
      "Iteration #13: f(-1.063720703125) = -0.06509414662395585\n",
      "Root found at -1.063720703125\n"
     ]
    }
   ],
   "source": [
    "##Root Finding\n",
    "import numpy as np\n",
    "\n",
    "def f(x):\n",
    "    return 8 * (x**5) - 10 * (x**4) + (x**3) + 2 * (x**2) - 9 * x + 13\n",
    "def g(x):\n",
    "    return 40 * (x**4) - 40 * (x**3) + 3 * (x**2) + 4 * x - 9\n",
    "\n",
    "#Newton Raphson\n",
    "def newton_raphson(x, tolerance=0.090, iteration=50):\n",
    "    for i in range(iteration):\n",
    "        x = x - (f(x)/g(x))\n",
    "        print('Iteration #',i+1, 'new root = ', x)\n",
    "        if np.abs(f(x)) < tolerance:\n",
    "            print('Final root answer is ', x)\n",
    "            return x\n",
    "        \n",
    "print('With Newton Raphson')\n",
    "print((newton_raphson(5)))\n",
    "print('')\n",
    "\n",
    "#Bisection\n",
    "iter = 0\n",
    "def bisection(left, right, tolerance=0.090):\n",
    "    global iter\n",
    "    iter += 1\n",
    "    \n",
    "    if(np.sign(f(left)) == np.sign(f(right))):\n",
    "        print('Invalid left and right parameter')\n",
    "        return False\n",
    "    \n",
    "    mid = left + (right-left)/2\n",
    "    print(f'Iteration #{iter}: f({mid}) = {f(mid)}')\n",
    "    \n",
    "    if(np.abs(f(mid)) < tolerance):\n",
    "        print(f'Root found at {mid}')\n",
    "        return True\n",
    "    elif (np.sign(f(left)) == np.sign(f(mid))):\n",
    "        bisection(mid, right, tolerance)\n",
    "    elif (np.sign(f(right)) == np.sign(f(mid))):\n",
    "        bisection(left, mid, tolerance)\n",
    "        \n",
    "print('With Bisection')\n",
    "bisection(-10, 8)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Left Rieman = 5553261.866453566\n",
      "Right Rieman = 5553635.994453565\n",
      "Middle Rieman = 5553448.930453566\n",
      "Trapezoid Rieman = 5553261.866794273\n"
     ]
    }
   ],
   "source": [
    "##Integral Riemann\n",
    "def f(x):\n",
    "    return 40 * (x**4) - 40 * (x**3) + 3 * (x**2) + 4 * x - 9\n",
    "\n",
    "startPoint = 5\n",
    "endPoint = 15\n",
    "n = 50000\n",
    "h = (endPoint - startPoint) / n\n",
    "points = np.linspace(startPoint, endPoint, n)\n",
    "\n",
    "#left Rieman\n",
    "leftRieman = h * (np.sum(f(points[:-1])))\n",
    "print(f'Left Rieman = {leftRieman}')\n",
    "\n",
    "#Right Rieman\n",
    "rightRieman = h * (np.sum(f(points[1:])))\n",
    "print(f'Right Rieman = {rightRieman}')\n",
    "\n",
    "#Middle Rieman\n",
    "middleRieman = h * np.sum((f((points[:-1])) + f(points[1:]))/2)\n",
    "print(f'Middle Rieman = {middleRieman}')\n",
    "\n",
    "trapeZoidRieman = (h/2) * (f(points[0]) + f(points[1]) + 2  * np.sum(f(points[1:-1])))\n",
    "print(f'Trapezoid Rieman = {trapeZoidRieman}')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
